/**
/*Search in a bitonic array. 
/*An array is bitonic if it is comprised of an increasing sequence of integers followed immediately by a decreasing sequence of integers. 
/*Write a program that, given a bitonic array of n distinct integer values, determines whether a given integer is in the array.
 */
算法思想描述：先找到双调函数的peak（lgN），然后再在两边使用二分查找（2lgN），总共3lgN


boolean search_left(int key,int a[],int lo,int hi){
    while(lo<=hi){
        int mid=(lo+hi)/2;
        if(a[mid]>key)  hi=mid-1;
        else if(a[mid]<key)   lo=mid+1;
        else return true;
    }
    return false;
}


boolean search_right(int key,int a[],int lo,int hi){
    while(lo<=hi){
        int mid=(lo+hi)/2;
        if(a[mid]>key)  lo=mid+1;
        else if(a[mid]<key)   hi=mid-1;
        else return true;
    }
     return false;
}


int find_peak(int a[]){
    int lo=0,hi=a.length-1;
    while(lo<hi){
        int mid=lo + (hi-lo)/2;     //这里不用（lo+hi）/2是防止当lo，hi都很大时的溢出
        if(a[mid]<a[mid+1])  lo=mid+1;
        else  hi=mid;
    }
    return lo;
}

boolean bitonic_search(int a[],int key){
     int peak=find_peak(a);
     int lo=0,hi=a.length;
     return find_left(key,a,lo,peak)||
        find_left(key,a,peak,hi);
}
 
 
